{
  "name": "backend",
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "sourceRoot": "apps/backend/src",
  "projectType": "application",
  "targets": {
    "build": {
      "executor": "nx:run-commands",
      "options": {
        "parallel": false,
        "commands": [
          {
            "command": "rm -rf ./dist/apps/backend"
          },
          {
            "command": "npx tsc --incremental --project ./apps/backend/tsconfig.app.json"
          },
          {
            "command": "cp -R ./apps/backend/src/assets ./dist/apps/backend/src/assets"
          }
        ]
      }
    },
    "build:docker": {
      "dependsOn": ["build"],
      "command": "docker build -f apps/backend/Dockerfile --progress=plain . -t you-say-api-image"
    },
    "build:dev:docker": {
      "command": "docker build -f apps/backend/dev.Dockerfile . --progress=plain -t you-say-api-image"
    },
    "cleanup": {
      "executor": "nx:run-commands",
      "options": {
        "commands": [
          {
            "command": "docker-compose down -v"
          },
          {
            "command": "docker system prune -f"
          },
          {
            "command": "rm -rf ./dist/apps/backend"
          },
          {
            "command": "rm -rf deployment/terraform.tfstate* deployment/.terraform*"
          }
        ]
      }
    },
    "init:terraform": {
      "executor": "nx:run-commands",
      "options": {
        "parallel": false,
        "command": "terraform -chdir=deployment init"
      }
    },
    "plan:terraform": {
      "executor": "nx:run-commands",
      "options": {
        "parallel": false,
        "command": "terraform -chdir=deployment plan"
      }
    },
    "apply:terraform": {
      "executor": "nx:run-commands",
      "options": {
        "parallel": false,
        "command": "terraform -chdir=deployment apply -auto-approve"
      }
    },
    "start:dev": {
      "executor": "nx:run-commands",
      "options": {
        "parallel": false,
        "command": "tsc-watch --incremental --project ./apps/backend/tsconfig.app.json --onSuccess \"node ./dist/apps/backend/src/main.js\""
      }
    },
    "dev": {
      "executor": "nx:run-commands",
      "options": {
        "parallel": false,
        "commands": [
          {
            "command": "nx cleanup backend"
          },
          {
            "command": "nx build:dev:docker backend"
          },
          {
            "command": "docker-compose up -d"
          },
          {
            "command": "nx init:terraform backend -var-file=./dev.tfvars"
          },
          {
            "command": "nx apply:terraform backend -var-file=./dev.tfvars"
          },
          {
            "command": "nx apply:terraform backend -var-file=./dev.tfvars"
          }
        ]
      }
    },
    "openapi:create": {
      "executor": "nx:run-commands",
      "options": {
        "parallel": false,
        "commands": [
          {
            "command": "ts-node --project apps/backend/tsconfig.app.json --transpile-only -r tsconfig-paths/register apps/backend/src/shared/helpers/create-openapi-json.helper.ts"
          }
        ]
      }
    },
    "openapi:generate": {
      "executor": "nx:run-commands",
      "dependsOn": ["openapi:create"],
      "options": {
        "parallel": false,
        "commands": [
          {
            "command": "rm -rf apps/backend-e2e/src/api-client"
          },
          {
            "command": "openapi-generator-cli generate -i apps/backend/openApi.json -o apps/backend-e2e/src/api-client -g typescript-axios --additional-properties=useSingleRequestParameter=true"
          }
        ]
      }
    },
    "madge": {
      "executor": "nx:run-commands",
      "options": {
        "parallel": false,
        "cwd": "apps/backend",
        "command": "madge --circular"
      }
    },
    "test:unit": {
      "executor": "@nx/jest:jest",
      "options": {
        "jestConfig": "apps/backend/jest.config.ts",
        "passWithNoTests": true
      }
    }
  },
  "tags": []
}
